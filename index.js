import express from 'express';
import { verifyKeyMiddleware } from 'discord-interactions';
import dotenv from 'dotenv';

dotenv.config();

const app = express();
const PORT = process.env.PORT || 3000;

app.use(express.json());

app.post(
  '/interactions',
  verifyKeyMiddleware(process.env.DISCORD_PUBLIC_KEY),
  (req, res) => {
    const interaction = req.body;

    // PING –æ—Ç Discord
    if (interaction.type === 1) {
      return res.send({ type: 1 });
    }

    // SLASH-–∫–æ–º–∞–Ω–¥—ã
    if (interaction.type === 2) {
      const { name, options } = interaction.data;

      if (name === 'chat') {
        const message = options.find(opt => opt.name === 'message')?.value;
        return res.send({
          type: 4,
          data: {
            content: `üí¨ –í—ã —Å–∫–∞–∑–∞–ª–∏: ${message}`
          }
        });
      }

      if (name === 'rules') {
        return res.send({
          type: 4,
          data: {
            content: `üìú **–ü—Ä–∞–≤–∏–ª–∞ —Å–µ—Ä–≤–µ—Ä–∞:**\n1. –ù–µ –Ω–∞—Ä—É—à–∞–π ToS\n2. –ù–µ —Å–ø–∞–º—å\n3. –ë—É–¥—å –≤–µ–∂–ª–∏–≤`
          }
        });
      }

      if (name === 'help') {
        return res.send({
          type: 4,
          data: {
            content: `üõ† **–°–ø—Ä–∞–≤–∫–∞:**\n‚Ä¢ /chat <—Å–æ–æ–±—â–µ–Ω–∏–µ>\n‚Ä¢ /rules\n‚Ä¢ /help\n‚Ä¢ /ticket <—Ç–µ–º–∞>\n‚Ä¢ /game <–¥–µ–π—Å—Ç–≤–∏–µ>`
          }
        });
      }

      if (name === 'ticket') {
        const —Ç–µ–º–∞ = options.find(opt => opt.name === '—Ç–µ–º–∞')?.value;
        return res.send({
          type: 4,
          data: {
            content: `üé´ –¢–∏–∫–µ—Ç —Å–æ–∑–¥–∞–Ω: **${—Ç–µ–º–∞}**\n–û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏.`
          }
        });
      }

      if (name === 'game') {
        const –¥–µ–π—Å—Ç–≤–∏–µ = options.find(opt => opt.name === '–¥–µ–π—Å—Ç–≤–∏–µ')?.value.toLowerCase();
        let reply = 'ü§∑ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.';

        if (–¥–µ–π—Å—Ç–≤–∏–µ.includes('–∏–¥—Ç–∏')) reply = 'üö∂ –í—ã –∏–¥—ë—Ç–µ –≤–ø–µ—Ä—ë–¥ –ø–æ —Ç—Ä–æ–ø–µ.';
        else if (–¥–µ–π—Å—Ç–≤–∏–µ.includes('–æ—Å–º–æ—Ç—Ä–µ—Ç—å—Å—è')) reply = 'üîç –í—ã –æ—Å–º–æ—Ç—Ä–µ–ª–∏—Å—å –≤–æ–∫—Ä—É–≥.';
        else if (–¥–µ–π—Å—Ç–≤–∏–µ.includes('–≤–∑—è—Ç—å')) reply = 'üéí –í—ã –ø–æ–¥–æ–±—Ä–∞–ª–∏ –ø—Ä–µ–¥–º–µ—Ç.';

        return res.send({
          type: 4,
          data: { content: reply }
        });
      }

      // –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
      return res.send({
        type: 4,
        data: { content: '‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞' }
      });
    }
  }
);

// –¢–µ—Å—Ç–æ–≤—ã–π GET
app.get('/', (_, res) => {
  res.send('‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!');
});

app.listen(PORT, () => {
  console.log(`‚ö° –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});
